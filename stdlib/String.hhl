import "Option.hhl";
import "DynList.hhl";

func str_find string char start
    var i = 0;
    while (len string) > i do
        if string[i] == char then
            return call opt_some i;
        end
        i = i + 1;
    end

    return call opt_none;
end

func str_join list sep start
    var i = 0;
    var result = "";
    
    while (len list) > i do
        result = result + list[i];
        if (len list) > (i + 1) then
            result = result + sep;
        end
        i = i + 1;
    end

    return result;
end

func split str char start
    var parts, i, current;
    parts = call dl_create 10;

    i = 0;
    current = "";
    while i < (len str) do
        if str[i] == char then
            call dl_push parts current;
            current = "";
        else
            current = current + str[i];
        end

        i = i + 1;
    end

    call dl_push parts current;

    return parts;
end

func lines str start
    return (call split str '\n'); 
end

func trim_front str start
    var i, start_saving = false, result = "";

    i = 0;
    while i < (len str) do
        if !start_saving and (str[i] != '\n') and (str[i] != '\t') and (str[i] != ' ') then
            start_saving = true;
            continue;
        end

        if start_saving then
            result = result + str[i];
        end

        i = i + 1;
    end

    return result;
end

func trim_back str start
    var end_idx, i, result = "";

    i = (len str) - 1;
    while i >= 0 do
        if (str[i] != '\n') and (str[i] != '\t') and (str[i] != ' ') then
            break;
        end
        i = i - 1;
    end
    end_idx = i;

    i = 0;
    while i <= end_idx do
        result = result + str[i];
        i = i + 1;
    end

    return result;
end

func trim str start
    return (call trim_front (call trim_back str));
end

func is_digit c start
    return (c == '0') or (c == '1') or (c == '2') 
    or (c == '3') or (c == '4') or (c == '5') 
    or (c == '6') or (c == '7') or (c == '8') 
    or (c == '9');
end

func substr s start_idx end_idx start
    var result = "";
    var i = start_idx;
    while i < end_idx do
        result = result + s[i];
        i = i + 1;
    end

    return result;
end

func replace s pat replace_pat start
    var result = "";

    var i = 0;
    var curr;
    while i <= (len s) - (len pat) do
        curr = call substr s i (i + len pat);

        if curr != pat then
            result = result + s[i];
            i = i + 1; 
        end

        if curr == pat then
            result = result + replace_pat;
            i = i + (len pat);
            continue;
        end
    end

    if i < (len s) then
        while i < (len s) do
            result = result + s[i];
            i = i + 1;
        end
    end

    return result;
end